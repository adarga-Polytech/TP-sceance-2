/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2020 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f0xx_hal.h"

/* USER CODE BEGIN Includes */
#include <stdbool.h>
/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim17;

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
volatile unsigned char chars_haut[32];
volatile unsigned char chars_bas[32];
volatile unsigned int FlagFourche = 0;
volatile unsigned int Fourche = 0;
volatile unsigned int test = 0;
volatile unsigned int NumCol = 0;
volatile unsigned int state = 0;
volatile unsigned int maxValue = 0;
//unsigned char lettre1[7] = {0x80,0xF6,0xF6,0xF6,0x80,0xFF}; //Lettre A

// On a ecrits notre code de façon que La led s'allume sur Bit 1 (On trouve ca plus facile a traduire en binaire)

// Lettre necessaire pour ecrire nos nom, Asmae et Youssef
// Port B
unsigned int lettre1[7] = {0x7F00,0x0900,0x0900,0x0900,0x7F00,0x0000}; //Lettre A
unsigned int lettre2[7] = {0x4F00,0x4800,0x4800,0x4800,0x7F00,0x0000}; // Lettre y
unsigned int lettre3[7] = {0x7F00,0x4100,0x4100,0x4100,0x7F00,0x0000}; //Lettre O
unsigned int lettre4[7] = {0x7F00,0x4000,0x4000,0x4000,0x7F00,0x0000}; //Lettre U
unsigned int lettre5[7] = {0x4F00,0x4900,0x4900,0x4900,0x7900,0x0000}; //Lettre S
unsigned int lettre6[7] = {0x7F00,0x0200,0x0400,0x0200, 0x7F00,0x0000}; //Lettre M
unsigned int lettre7[7] = {0x7F00,0x4900,0x4900,0x4900,0x4900,0x0000}; //Lettre E
unsigned int lettre8[7] = {0x7F00,0x0900,0x0900,0x0900,0x0900,0x0000}; //Lettre F

// Valeur courante du compteur Timer

unsigned int Current_ValueTim3;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM17_Init(void);
static void MX_NVIC_Init(void);

/* USER CODE BEGIN PFP */

/* Private function prototypes -----------------------------------------------*/
void Reset_Patte(GPIO_TypeDef* , unsigned int);
void Set_Patte(GPIO_TypeDef *, unsigned int);
void Delayus(volatile unsigned int);
void set_Bus(GPIO_TypeDef *,unsigned);
void reset_Bus (GPIO_TypeDef*,unsigned);
void Affich_char_Haut(char *);
void delayms(volatile unsigned int temps);
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */




/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM3_Init();
  MX_TIM17_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start(&htim3);
  HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start_IT(&htim17);

  // initialisation des leds, etteints
  reset_Bus(GPIOB,0XFF00);
  reset_Bus(GPIOA,0X00FF);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {






	  if ( Fourche == 1) {


		  if (state == 1 && test == 1 && maxValue == 0){
			  set_Bus(GPIOB,lettre1[NumCol]);
			  NumCol ++;

				  if(NumCol == 6) {
					 maxValue = 1;
					 NumCol = 0;
				  }
				  else
					 maxValue = 0;

			  test = 0;
		  }

		  if (state == 0){
			  test = 1;
			  reset_Bus(GPIOB,lettre1[NumCol]);

		  }

		  // interuption FlagFourche

/*
		  // Test 1, une ligne affiché

		 		set_Bus(GPIOB,0XFF00);
		 		set_Bus(GPIOA,0X00FF);
		 		Delayus(1008);
		 		reset_Bus(GPIOB,0XFF00);
		 		reset_Bus(GPIOA,0X00FF);
		 		Delayus(1008);
		 		FlagFourche =0;

*/



/*
// Affichage caractere A

			reset_Bus(GPIOA,0x00FF);
			reset_Bus(GPIOB,0x8000);   // force derniere led a 1 (etteinte)
			set_Bus(GPIOB,0x7F00);
			Delayus(1008);
			reset_Bus(GPIOB,0x8000);
			reset_Bus(GPIOB,0x7F00);
			set_Bus(GPIOB,0x0900);
			Delayus(1008);
			reset_Bus(GPIOB,0x8000);
			reset_Bus(GPIOB,0x0900);
		   	set_Bus(GPIOB,0x0900);
		   	Delayus(1008);
		   	reset_Bus(GPIOB,0x8000);
		   	reset_Bus(GPIOB,0x0900);
			set_Bus(GPIOB,0x0900);
			Delayus(1008);
			reset_Bus(GPIOB,0x8000);
			reset_Bus(GPIOB,0x0900);
			set_Bus(GPIOB,0x7F00);
			Delayus(1008);
			reset_Bus(GPIOB,0x8000);
			reset_Bus(GPIOB,0x7F00);
			Delayus(1008);

			FlagFourche =0;

*/

// Test 2 , affichage d'une une étoile

/*
	      Set_Patte(GPIOA,0);
	  	  Delayus(1008);
	  	  Reset_Patte(GPIOA , 0);

	      Delayus(1008);
		  Set_Patte(GPIOA,1);
		  Delayus(1008);
		  Reset_Patte(GPIOA , 1);

		  Delayus(1008);

		  Set_Patte(GPIOA,2);
		  Delayus(1008);
		  Reset_Patte(GPIOA , 2);

		  Delayus(1008);

		  Set_Patte(GPIOA,3);
		  Delayus(1008);
		  Reset_Patte(GPIOA , 3);

		  Delayus(1008);

		  Set_Patte(GPIOA,4);
		  Delayus(1008);
		  Reset_Patte(GPIOA , 4);

		  Delayus(1008);

		  Set_Patte(GPIOA , 5);
		  Delayus(1008);
		  Reset_Patte(GPIOA , 5);

		  Delayus(1008);

		  Set_Patte(GPIOA,6);
		  Delayus(1008);
		  Reset_Patte(GPIOA , 6);



		  Delayus(1008);

		  Set_Patte(GPIOA,7);
		  Delayus(1008);
		  Reset_Patte(GPIOA , 7);

		  Delayus(1008);

		  Set_Patte(GPIOB , 8);
		  Set_Patte(GPIOB , 9);
		  Set_Patte(GPIOB , 9);
		  Set_Patte(GPIOB , 10);
		  Set_Patte(GPIOB , 11);
		  Set_Patte(GPIOB , 12);
		  Set_Patte(GPIOB , 13);
		  Set_Patte(GPIOB , 14);
		  Set_Patte(GPIOB , 15);

		  Delayus(1008);

		  Reset_Patte(GPIOB , 8);
		  Reset_Patte(GPIOB , 9);
		  Reset_Patte(GPIOB , 9);
		  Reset_Patte(GPIOB , 10);
		  Reset_Patte(GPIOB , 11);
		  Reset_Patte(GPIOB , 12);
		  Reset_Patte(GPIOB , 13);
		  Reset_Patte(GPIOB , 14);
		  Reset_Patte(GPIOB , 15);

		  Delayus(1008);


*/

}


  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
}

/* TIM3 init function */
static void MX_TIM3_Init(void)
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 172;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 99;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/* TIM17 init function */
static void MX_TIM17_Init(void)
{

  htim17.Instance = TIM17;
  htim17.Init.Prescaler = 3125;
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim17.Init.Period = 999;
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim17.Init.RepetitionCounter = 0;
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/** Configure pins as 
        * Analog 
        * Input 
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin 
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED10_Pin|LED11_Pin|LED12_Pin|LED13_Pin 
                          |LED14_Pin|LED15_Pin|LED8_Pin|LED9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin 
                           LED4_Pin LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin 
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LED10_Pin LED11_Pin LED12_Pin LED13_Pin 
                           LED14_Pin LED15_Pin LED8_Pin LED9_Pin */
  GPIO_InitStruct.Pin = LED10_Pin|LED11_Pin|LED12_Pin|LED13_Pin 
                          |LED14_Pin|LED15_Pin|LED8_Pin|LED9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{

	if(htim -> Instance == TIM3){

		if (state == 0) state = 1;
		else state = 0;

	}
	 if (htim->Instance==TIM17)
	{
		 if (Fourche == 0) Fourche = 1;
		 else Fourche = 0;
	}

}


void Set_Patte(GPIO_TypeDef *Port, unsigned int NewPatte){ // met bit a 1
	 Port -> ODR &= ~ (1<<NewPatte);
 }

 void Reset_Patte(GPIO_TypeDef *Port, unsigned int NewPatte ){

	 Port -> ODR |= (1<<NewPatte);
 }

 void set_Bus(GPIO_TypeDef *Port,unsigned Leds){
	 Port -> ODR &= ~ Leds;

 }
 void reset_Bus (GPIO_TypeDef *Port,unsigned Leds){
	 Port -> ODR |= Leds;

 }

 void Delayus(volatile unsigned int seuil){
 	volatile unsigned int i;
 	for(i=0; i<seuil ;i++){
 	}
 }


void Affich_char_Haut(char mot[32]){

	unsigned int i;
	for (i=0;i<36;i++){

		switch(mot[i]){

		case('A'):

		        set_Bus(GPIOA,lettre1[1]);
				Delayus(1008);// delay d'un pixel
				reset_Bus(GPIOA,lettre1[1]);

				set_Bus(GPIOA,lettre1[2]);
				Delayus(1008);// delay d'un pixel
				reset_Bus(GPIOA,lettre1[2]);

		        set_Bus(GPIOA,lettre1[3]);
				Delayus(1008);// delay d'un pixel
				reset_Bus(GPIOA,lettre1[3]);

				set_Bus(GPIOA,lettre1[4]);
				Delayus(1008);// delay d'un pixel
				reset_Bus(GPIOA,lettre1[4]);

		        set_Bus(GPIOA,lettre1[5]);
				Delayus(1008);// delay d'un pixel
				reset_Bus(GPIOA,lettre1[5]);

				set_Bus(GPIOA,lettre1[6]);
				Delayus(1008);// delay d'un pixel
				reset_Bus(GPIOA,lettre1[6]);

				break;
/*
		case('B'):
		case('C'):
		case('D'):
		case('E'):
		case('F'):
		case('G'):
		case('H'):
		case('I'):
		case('J'):
		case('K'):
		case('L'):
		case('M'):
		case('N'):
		case('O'):
		case('P'):
		case('K'):
		case('R'):
		case('S'):
		case('T'):
*/

		} // fin switch


	}// fin for



}// fin foction


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	 if(GPIO_Pin == GPIO_PIN_15)
   {

		 FlagFourche = 1;
   }

}






/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/**
  * @}
  */

/**
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
